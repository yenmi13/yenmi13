import React, { useState, useRef, useEffect } from "react";

const FASTING_MODES = [
  { label: "16/8", hours: 16 },
  { label: "20/4", hours: 20 },
  { label: "32h", hours: 32 },
  { label: "42h", hours: 42 },
  { label: "48h", hours: 48 },
];

function formatTime(seconds) {
  const h = Math.floor(seconds / 3600)
    .toString()
    .padStart(2, "0");
  const m = Math.floor((seconds % 3600) / 60)
    .toString()
    .padStart(2, "0");
  const s = Math.floor(seconds % 60)
    .toString()
    .padStart(2, "0");
  return `${h}:${m}:${s}`;
}

export default function FastingTimer() {
  const [selectedMode, setSelectedMode] = useState(FASTING_MODES[0]);
  const [elapsed, setElapsed] = useState(0);
  const [running, setRunning] = useState(false);
  const [records, setRecords] = useState([]); // 儲存三次紀錄
  const intervalRef = useRef(null);

  // 讀取前3次紀錄
  useEffect(() => {
    const recordStr = localStorage.getItem("fasting-records");
    if (recordStr) setRecords(JSON.parse(recordStr));
  }, []);

  // 儲存新紀錄，保留近三筆
  function saveRecord(hours, seconds) {
    const record = {
      mode: hours,
      seconds,
      date: new Date().toLocaleString(),
    };
    const newRecords = [record, ...records].slice(0, 3);
    setRecords(newRecords);
    localStorage.setItem("fasting-records", JSON.stringify(newRecords));
  }

  const totalSeconds = selectedMode.hours * 3600;
  const progress = Math.min((elapsed / totalSeconds) * 100, 100);

  function startTimer() {
    if (intervalRef.current) return;
    setRunning(true);
    intervalRef.current = setInterval(() => {
      setElapsed((prev) => {
        if (prev + 1 >= totalSeconds) {
          clearInterval(intervalRef.current);
          intervalRef.current = null;
          setRunning(false);
          saveRecord(selectedMode.hours, totalSeconds); // 存完成紀錄
          return totalSeconds;
        }
        return prev + 1;
      });
    }, 1000);
  }

  function pauseTimer() {
    setRunning(false);
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }

  function resetTimer() {
    if (elapsed > 0) saveRecord(selectedMode.hours, elapsed); // 存重置前紀錄
    setElapsed(0);
    setRunning(false);
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }

  function handleModeChange(mode) {
    pauseTimer();
    setElapsed(0);
    setSelectedMode(mode);
  }

  // 白色背景 + 深咖啡主題
  const theme = "bg-white text-[#876D5A]";
  const borderTheme = "border-[#bfa07e]";
  const shadowTheme = "shadow-xl";
  const progressColor = "#876D5A";
  const baseCircleColor = "#ecdac8";

  return (
    <div
      className={`flex flex-col items-center rounded-2xl ${shadowTheme} p-6 max-w-md mx-auto mt-10 transition-all duration-300 ${theme} border-2 ${borderTheme}`}
    >
      <div className="w-full mb-6">
        <div className="flex justify-between items-center">
          <div className="text-3xl font-bold mb-2 text-center w-full">
            斷食倒數計時器
          </div>
        </div>
        <div className="text-sm text-[#b89878] text-center mb-1">
          持續追蹤你的斷食時間
        </div>
        {/* 展示三次紀錄 */}
        {records && records.length > 0 && (
          <div className="text-xs text-[#C28153] text-center mb-3">
            {records.map((rec, idx) => (
              <div key={idx}>
                {idx === 0 ? "最近紀錄" : `前${idx + 1}次`}｜
                {rec.mode}小時：{formatTime(rec.seconds)}
                <span className="ml-2 text-[#b89878]">({rec.date})</span>
              </div>
            ))}
          </div>
        )}
        <div className="flex justify-center space-x-2 mb-4">
          {FASTING_MODES.map((mode) => (
            <button
              key={mode.label}
              className={`px-3 py-1 rounded-xl text-sm font-semibold border ${borderTheme} transition
                ${selectedMode.label === mode.label
                  ? "bg-[#876D5A] text-white"
                  : "bg-[#e9dbc5] text-[#876D5A]"}
                hover:bg-[#f3e8dc]`}
              onClick={() => handleModeChange(mode)}
              disabled={running}
              style={{letterSpacing: "0.04em"}}
            >
              {mode.label}
            </button>
          ))}
        </div>
      </div>

      {/* 計時圓圈 + 時間數字 */}
      <div className="relative w-full flex flex-col items-center mb-4">
        <div className="w-56 h-56 flex items-center justify-center relative">
          {/* 背後圓形進度條 */}
          <svg className="absolute top-0 left-0" width="224" height="224" viewBox="0 0 224 224" style={{ zIndex: 0 }}>
            <circle
              cx="112"
              cy="112"
              r="104"
              fill="none"
              stroke={baseCircleColor}
              strokeWidth="16"
            />
            <circle
              cx="112"
              cy="112"
              r="104"
              fill="none"
              stroke={progressColor}
              strokeWidth="16"
              strokeDasharray={2 * Math.PI * 104}
              strokeDashoffset={2 * Math.PI * 104 * (1 - progress / 100)}
              strokeLinecap="round"
              style={{ transition: "stroke-dashoffset 0.5s" }}
            />
          </svg>
          {/* 正中央的大時間數字 */}
          <span className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 text-4xl font-mono z-10 select-none">
            {formatTime(elapsed)}
          </span>
        </div>
      </div>

      <div className="flex justify-center space-x-4 mb-6">
        <button
          className="px-6 py-2 rounded-xl font-semibold shadow bg-[#876D5A] text-white hover:bg-[#bfa07e] transition"
          onClick={running ? pauseTimer : startTimer}
        >
          {running ? "暫停" : elapsed === totalSeconds ? "完成" : "開始"}
        </button>
        <button
          className="px-4 py-2 rounded-xl font-semibold shadow bg-[#e9dbc5] text-[#876D5A] hover:bg-[#f3e8dc] transition"
          onClick={resetTimer}
        >
          重置
        </button>
      </div>

      <div className="text-sm mt-2 text-[#b89878]">
        斷食目標：{selectedMode.hours} 小時｜總時數
      </div>
    </div>
  );
}
